{"version":3,"file":"lockerjs.umd.js","sources":["../src/locker.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * Extremely light library that makes HTML5 storage usage easier to the edge.\r\n * No dependencies, no configuration.\r\n */\r\nexport default class {\r\n    /**\r\n     * Creates a locker\r\n     * @param {object} storage\r\n     * @example\r\n     * // localStorage\r\n     * const locker = new Locker(window.localStorage);\r\n     * // sessionStorage\r\n     * const locker = new Locker(window.sessionStorage);\r\n     */\r\n    constructor(storage) {\r\n        const typeErrMsg = 'Invalid Storage object';\r\n        const refErrMsg = 'HTML5 Storage is not supported in this environment';\r\n        if (storage !== window.localStorage &&\r\n            storage !== window.sessionStorage) {\r\n            throw new TypeError(typeErrMsg);\r\n        }\r\n        if (this._isSupported(storage)) {\r\n            this.storage = storage;\r\n        } else {\r\n            throw new ReferenceError(refErrMsg);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a value into HTML5 window.localStorage.\r\n     * @param {*} key\r\n     * @param {*} value\r\n     * @example\r\n     * const myObj = {\r\n     *     'name': 'John',\r\n     *     'surname': 'Test',\r\n     * };\r\n     */\r\n    add(key, value) {\r\n        key = this._parseToString(key);\r\n        switch (typeof value) {\r\n            case 'object': {\r\n                const parsedVal = this._parseToString(value);\r\n                this.storage.setItem(key, parsedVal);\r\n                break;\r\n            }\r\n            default: {\r\n                this.storage.setItem(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a value with a given key to the storage if a key is not already used.\r\n     * Otherwise returns ReferenceError instead of overwriting it;\r\n     * @param {*} key\r\n     * @param {*} value\r\n     * @example\r\n     * locker.addSafely('Key 1', 1); //OK\r\n     * locker.addSafely('Key 1', 123); //ReferenceError\r\n     */\r\n    addSafely(key, value) {\r\n        key = this._parseToString(key);\r\n        const keyExists = this.storage.getItem(key);\r\n        if (keyExists) {\r\n            throw new ReferenceError('Provided key is already in use');\r\n        }\r\n        this.add(key, value);\r\n    }\r\n\r\n    /**\r\n     * Get a value from HTML5 window.localStorage\r\n     * @param {*} key\r\n     * @return {*}\r\n     * @example\r\n     * locker.get(123);\r\n     */\r\n    get(key) {\r\n        key = this._parseToString(key);\r\n        return this.storage.getItem(key);\r\n    }\r\n\r\n    /**\r\n     * Saves map as-is into localstorage\r\n     * @param {Map} map\r\n     * @example\r\n     * const sampleMap = new Map();\r\n     * map.set(1, 'First entry');\r\n     * map.set(2, 'Second entry');\r\n     * locker.clear();\r\n     * locker.saveMap(sampleMap);\r\n     * locker.get(1); // 'First entry'\r\n     * locker.get(2); // 'Second entry'\r\n     */\r\n    saveMap(map) {\r\n        const isMap = Object.prototype.toString.call(map) === '[object Map]';\r\n        if (!isMap) {\r\n            throw new TypeError('Must be of type Map');\r\n        }\r\n        for (let [key, value] of map) {\r\n            this.add(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves and returns whole storage as map\r\n     * @return {Map} HTML5 Storage copy\r\n     * @example\r\n     * locker.add(1, [1, 2, 3]);\r\n     * const backup = locker.saveMap();\r\n     */\r\n    getMap() {\r\n        const mappedStorage = new Map();\r\n        for (let i = 0; i < this.storage.length; i++) {\r\n            let tempKey = this._parseToString(this.storage.key(i));\r\n            let tempVal = this._parseToString(this.storage.getItem(tempKey));\r\n            mappedStorage.set(tempKey, tempVal);\r\n        }\r\n        return mappedStorage;\r\n    }\r\n\r\n    /**\r\n     * Saves set as-is into localstorage\r\n     * @param {Set} set\r\n     * @example\r\n     * const sampleSet = new Set();\r\n     * set.add(1, 'First entry');\r\n     * set.add(2, 'Second entry');\r\n     * locker.clear();\r\n     * locker.saveSet(sampleSet);\r\n     * locker.get(1); // 'First entry'\r\n     * locker.get(2); // 'Second entry'\r\n     */\r\n    saveSet(set) {\r\n        const isSet = Object.prototype.toString.call(set) === '[object Set]';\r\n        if (!isSet) {\r\n            throw new TypeError('Must be of type Set');\r\n        }\r\n        for (let [key, value] of set.entries()) {\r\n            this.add(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether the given key exists in the window.localStorage\r\n     * @param {*} key\r\n     * @return {boolean}\r\n     * @example\r\n     * locker.add(2, 1234);\r\n     * locker.keyExists(2) // True\r\n     * locker.keyExists({'name': 'John'}) // False\r\n     */\r\n    keyExists(key) {\r\n        return !!this.storage.getItem(this._parseToString(key));\r\n    }\r\n\r\n    /**\r\n     * Check whether the given value exists in the window.localStorage\r\n     * @param {*} value\r\n     * @return {boolean}\r\n     * @example\r\n     * const mySet = new Set();\r\n     * mySet.set(\"Some array\", [1, 2, 3]);\r\n     * locker.add(mySet);\r\n     * locker.valueExists(mySet); // True\r\n     */\r\n    valueExists(value) {\r\n        const parsedVal = this._parseToString(value);\r\n        return !!parsedVal;\r\n    }\r\n\r\n    /**\r\n     * Clear the whole window.localStorage\r\n     * @example\r\n     * locker.add(1, [1, 2]);\r\n     * locker.clear(); //Empty\r\n     */\r\n    clear() {\r\n        this.storage.clear();\r\n    }\r\n\r\n    /**\r\n     * Removes HTML5 Storage values by keys provide in array\r\n     * @param {array} arr\r\n     * @example\r\n     * const testObj = {\r\n     *     'name': 'John',\r\n     * }\r\n     * locker.add(testObj, \"We like this customer!\");\r\n     * locker.add(1, 123);\r\n     * const keysToRemove = ['1', testObj];\r\n     * locker.clearSpecified(keysToRemove); // Empty\r\n     */\r\n    clearSpecified(arr) {\r\n        if (!Array.isArray(arr)) {\r\n            throw new TypeError('Array not provided');\r\n        }\r\n        for (let i = 0; i < arr.length; ++i) {\r\n            this.storage.removeItem(this._parseToString(arr[i]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the storage\r\n     * @return {number}\r\n     * @example\r\n     * locker.add(12, [1,2]);\r\n     * locker.size(); //1\r\n     */\r\n    size() {\r\n        return this.storage.length;\r\n    }\r\n\r\n    /**\r\n     * Parse value to stringified JSON\r\n     * @param {*} value\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    _parseToString(value) {\r\n        switch (typeof value) {\r\n            case 'number':\r\n            case 'object': {\r\n                return JSON.stringify(value);\r\n            }\r\n            default: {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether current environment supports HTML5 storage\r\n     * @param {Object} storage\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    _isSupported(storage) {\r\n        const mockVal = '__test';\r\n        try {\r\n            storage.setItem(mockVal, mockVal);\r\n            storage.removeItem(mockVal);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"],"names":["constructor","window","localStorage","sessionStorage","TypeError","_isSupported","storage","ReferenceError","add","_parseToString","setItem","addSafely","getItem","get","saveMap","prototype","toString","call","getMap","Map","length","key","set","saveSet","entries","keyExists","valueExists","clear","clearSpecified","Array","isArray","removeItem","size","JSON","stringify"],"mappings":"qSAMe,KAAM,CAUjBA,cAAqB,CAGjB,GAAI,IAAYC,OAAOC,YAAnB,EACA,IAAYD,OAAOE,cADvB,CAEI,KAAM,IAAIC,UAAJ,CAJS,wBAIT,CAAN,CAEJ,GAAI,KAAKC,YAAL,GAAJ,CACI,KAAKC,OAAL,EADJ,KAGI,MAAM,IAAIC,eAAJ,CARQ,oDAQR,CAEb,CAYDC,QAAgB,CAEZ,OADA,EAAM,KAAKC,cAAL,GACN,CAAQ,QAAR,EACI,IAAK,QAAL,CAAe,CACX,KAAM,GAAY,KAAKA,cAAL,GAAlB,CACA,KAAKH,OAAL,CAAaI,OAAb,KAFW,CAGX,KACH,CACD,QACI,KAAKJ,OAAL,CAAaI,OAAb,KADJ,CANJ,CAUH,CAWDC,cAAsB,CAClB,EAAM,KAAKF,cAAL,GADY,CAElB,KAAM,GAAY,KAAKH,OAAL,CAAaM,OAAb,GAAlB,CACA,KACI,KAAM,IAAIL,eAAJ,CAAmB,gCAAnB,CAAN,CAEJ,KAAKC,GAAL,KACH,CASDK,MAAS,CAEL,MADA,GAAM,KAAKJ,cAAL,GACN,CAAO,KAAKH,OAAL,CAAaM,OAAb,GACV,CAcDE,UAAa,CACT,KAAM,GAAgD,cAAxC,UAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,GAAd,CACA,GAAI,EAAJ,CACI,KAAM,IAAIb,UAAJ,CAAc,qBAAd,CAAN,CAEJ,IAAK,GAAI,KAAT,KACI,KAAKI,GAAL,KAEP,CASDU,QAAS,CACL,KAAM,GAAgB,GAAIC,IAA1B,CACA,IAAK,GAAI,GAAI,CAAb,CAAgB,EAAI,KAAKb,OAAL,CAAac,MAAjC,CAAyC,GAAzC,CAA8C,CAC1C,GAAI,GAAU,KAAKX,cAAL,CAAoB,KAAKH,OAAL,CAAae,GAAb,GAApB,CAAd,CACI,EAAU,KAAKZ,cAAL,CAAoB,KAAKH,OAAL,CAAaM,OAAb,GAApB,CADd,CAEA,EAAcU,GAAd,KACH,CACD,QACH,CAcDC,UAAa,CACT,KAAM,GAAgD,cAAxC,UAAOR,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,GAAd,CACA,GAAI,EAAJ,CACI,KAAM,IAAIb,UAAJ,CAAc,qBAAd,CAAN,CAEJ,IAAK,GAAI,KAAT,EAAyB,GAAIoB,OAAJ,EAAzB,CACI,KAAKhB,GAAL,KAEP,CAWDiB,YAAe,CACX,MAAO,CAAC,CAAC,KAAKnB,OAAL,CAAaM,OAAb,CAAqB,KAAKH,cAAL,GAArB,CACZ,CAYDiB,cAAmB,CACf,KAAM,GAAY,KAAKjB,cAAL,GAAlB,CACA,MAAO,CAAC,EACX,CAQDkB,OAAQ,CACJ,KAAKrB,OAAL,CAAaqB,KAAb,EACH,CAcDC,iBAAoB,CAChB,GAAI,CAACC,MAAMC,OAAN,GAAL,CACI,KAAM,IAAI1B,UAAJ,CAAc,oBAAd,CAAN,CAEJ,IAAK,GAAI,GAAI,CAAb,CAAgB,EAAI,EAAIgB,MAAxB,CAAgC,GAAhC,CACI,KAAKd,OAAL,CAAayB,UAAb,CAAwB,KAAKtB,cAAL,CAAoB,IAApB,CAAxB,CAEP,CASDuB,MAAO,CACH,MAAO,MAAK1B,OAAL,CAAac,MACvB,CAQDX,iBAAsB,CAClB,OAAQ,QAAR,EACI,IAAK,QAAL,CACA,IAAK,QAAL,CACI,MAAOwB,MAAKC,SAAL,GAAP,CAEJ,QACI,SANR,CASH,CAQD7B,eAAsB,CAClB,KAAM,GAAU,QAAhB,CACA,GAAI,CAGA,MAFA,GAAQK,OAAR,KAEA,CADA,EAAQqB,UAAR,GACA,GACH,CAAC,QAAU,CACR,QACH,CACJ,CAlPgB"}