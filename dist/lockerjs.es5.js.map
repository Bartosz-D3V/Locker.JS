{"version":3,"file":"lockerjs.es5.js","sources":["../src/locker.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * Extremely light library that makes HTML5 storage usage easier to the edge.\r\n * No dependencies, no configuration.\r\n */\r\nexport default class {\r\n    /**\r\n     * Creates a locker\r\n     * @param {object} storage\r\n     * @example\r\n     * // localStorage\r\n     * const locker = new Locker(window.localStorage);\r\n     * // sessionStorage\r\n     * const locker = new Locker(window.sessionStorage);\r\n     */\r\n    constructor(storage) {\r\n        const typeErrMsg = 'Invalid Storage object';\r\n        const refErrMsg = 'HTML5 Storage is not supported in this environment';\r\n        if (storage !== window.localStorage &&\r\n            storage !== window.sessionStorage) {\r\n            throw new TypeError(typeErrMsg);\r\n        }\r\n        if (this._isSupported(storage)) {\r\n            this.storage = storage;\r\n        } else {\r\n            throw new ReferenceError(refErrMsg);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a value into HTML5 window.localStorage.\r\n     * @param {*} key\r\n     * @param {*} value\r\n     * @example\r\n     * const myObj = {\r\n     *     'name': 'John',\r\n     *     'surname': 'Test',\r\n     * };\r\n     */\r\n    add(key, value) {\r\n        key = this._parseToString(key);\r\n        switch (typeof value) {\r\n            case 'object': {\r\n                const parsedVal = this._parseToString(value);\r\n                this.storage.setItem(key, parsedVal);\r\n                break;\r\n            }\r\n            default: {\r\n                this.storage.setItem(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a value with a given key to the storage if a key is not already used.\r\n     * Otherwise returns ReferenceError instead of overwriting it;\r\n     * @param {*} key\r\n     * @param {*} value\r\n     * @example\r\n     * locker.addSafely('Key 1', 1); //OK\r\n     * locker.addSafely('Key 1', 123); //ReferenceError\r\n     */\r\n    addSafely(key, value) {\r\n        key = this._parseToString(key);\r\n        const keyExists = this.storage.getItem(key);\r\n        if (keyExists) {\r\n            throw new ReferenceError('Provided key is already in use');\r\n        }\r\n        this.add(key, value);\r\n    }\r\n\r\n    /**\r\n     * Get a value from HTML5 window.localStorage\r\n     * @param {*} key\r\n     * @return {*}\r\n     * @example\r\n     * locker.get(123);\r\n     */\r\n    get(key) {\r\n        key = this._parseToString(key);\r\n        return this.storage.getItem(key);\r\n    }\r\n\r\n    /**\r\n     * Saves map as-is into localstorage\r\n     * @param {Map} map\r\n     * @example\r\n     * const sampleMap = new Map();\r\n     * map.set(1, 'First entry');\r\n     * map.set(2, 'Second entry');\r\n     * locker.clear();\r\n     * locker.saveMap(sampleMap);\r\n     * locker.get(1); // 'First entry'\r\n     * locker.get(2); // 'Second entry'\r\n     */\r\n    saveMap(map) {\r\n        const isMap = Object.prototype.toString.call(map) === '[object Map]';\r\n        if (!isMap) {\r\n            throw new TypeError('Must be of type Map');\r\n        }\r\n        for (let [key, value] of map) {\r\n            this.add(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves and returns whole storage as map\r\n     * @return {Map} HTML5 Storage copy\r\n     * @example\r\n     * locker.add(1, [1, 2, 3]);\r\n     * const backup = locker.saveMap();\r\n     */\r\n    getMap() {\r\n        const mappedStorage = new Map();\r\n        for (let i = 0; i < this.storage.length; i++) {\r\n            let tempKey = this._parseToString(this.storage.key(i));\r\n            let tempVal = this._parseToString(this.storage.getItem(tempKey));\r\n            mappedStorage.set(tempKey, tempVal);\r\n        }\r\n        return mappedStorage;\r\n    }\r\n\r\n    /**\r\n     * Saves set as-is into localstorage\r\n     * @param {Set} set\r\n     * @example\r\n     * const sampleSet = new Set();\r\n     * set.add(1, 'First entry');\r\n     * set.add(2, 'Second entry');\r\n     * locker.clear();\r\n     * locker.saveSet(sampleSet);\r\n     * locker.get(1); // 'First entry'\r\n     * locker.get(2); // 'Second entry'\r\n     */\r\n    saveSet(set) {\r\n        const isSet = Object.prototype.toString.call(set) === '[object Set]';\r\n        if (!isSet) {\r\n            throw new TypeError('Must be of type Set');\r\n        }\r\n        for (let [key, value] of set.entries()) {\r\n            this.add(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether the given key exists in the window.localStorage\r\n     * @param {*} key\r\n     * @return {boolean}\r\n     * @example\r\n     * locker.add(2, 1234);\r\n     * locker.keyExists(2) // True\r\n     * locker.keyExists({'name': 'John'}) // False\r\n     */\r\n    keyExists(key) {\r\n        return !!this.storage.getItem(this._parseToString(key));\r\n    }\r\n\r\n    /**\r\n     * Check whether the given value exists in the window.localStorage\r\n     * @param {*} value\r\n     * @return {boolean}\r\n     * @example\r\n     * const mySet = new Set();\r\n     * mySet.set(\"Some array\", [1, 2, 3]);\r\n     * locker.add(mySet);\r\n     * locker.valueExists(mySet); // True\r\n     */\r\n    valueExists(value) {\r\n        const parsedVal = this._parseToString(value);\r\n        return !!parsedVal;\r\n    }\r\n\r\n    /**\r\n     * Clear the whole window.localStorage\r\n     * @example\r\n     * locker.add(1, [1, 2]);\r\n     * locker.clear(); //Empty\r\n     */\r\n    clear() {\r\n        this.storage.clear();\r\n    }\r\n\r\n    /**\r\n     * Removes HTML5 Storage values by keys provide in array\r\n     * @param {array} arr\r\n     * @example\r\n     * const testObj = {\r\n     *     'name': 'John',\r\n     * }\r\n     * locker.add(testObj, \"We like this customer!\");\r\n     * locker.add(1, 123);\r\n     * const keysToRemove = ['1', testObj];\r\n     * locker.clearSpecified(keysToRemove); // Empty\r\n     */\r\n    clearSpecified(arr) {\r\n        if (!Array.isArray(arr)) {\r\n            throw new TypeError('Array not provided');\r\n        }\r\n        for (let i = 0; i < arr.length; ++i) {\r\n            this.storage.removeItem(this._parseToString(arr[i]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the storage\r\n     * @return {number}\r\n     * @example\r\n     * locker.add(12, [1,2]);\r\n     * locker.size(); //1\r\n     */\r\n    size() {\r\n        return this.storage.length;\r\n    }\r\n\r\n    /**\r\n     * Parse value to stringified JSON\r\n     * @param {*} value\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    _parseToString(value) {\r\n        switch (typeof value) {\r\n            case 'number':\r\n            case 'object': {\r\n                return JSON.stringify(value);\r\n            }\r\n            default: {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether current environment supports HTML5 storage\r\n     * @param {Object} storage\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    _isSupported(storage) {\r\n        const mockVal = '__test';\r\n        try {\r\n            storage.setItem(mockVal, mockVal);\r\n            storage.removeItem(mockVal);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"],"names":["storage","window","localStorage","sessionStorage","TypeError","this","_isSupported","ReferenceError","key","value","_parseToString","parsedVal","setItem","getItem","add","map","Object","prototype","toString","call","mappedStorage","Map","i","length","tempKey","tempVal","set","entries","clear","arr","Array","isArray","removeItem","JSON","stringify","e"],"mappings":";2pCAgBgBA,gBAGJA,IAAYC,OAAOC,cACnBF,IAAYC,OAAOE,qBACb,IAAIC,UAJK,8BAMfC,KAAKC,aAAaN,SAGZ,IAAIO,eARI,2DAMTP,QAAUA,wCAgBnBQ,EAAKC,YACCJ,KAAKK,eAAeF,YACXC,gBAAAA,QACN,aACKE,EAAYN,KAAKK,eAAeD,QACjCT,QAAQY,QAAQJ,EAAKG,sBAIrBX,QAAQY,QAAQJ,EAAKC,sCAc5BD,EAAKC,QACLJ,KAAKK,eAAeF,GACRH,KAAKL,QAAQa,QAAQL,SAE7B,IAAID,eAAe,uCAExBO,IAAIN,EAAKC,+BAUdD,YACMH,KAAKK,eAAeF,GACnBH,KAAKL,QAAQa,QAAQL,mCAexBO,QACkD,iBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,UAEnC,IAAIX,UAAU,8DAECW,iDAAK,oBAApBP,OAAKC,YACNK,IAAIN,EAAKC,uHAab,IADCW,EAAgB,IAAIC,IACjBC,EAAI,EAAGA,EAAIjB,KAAKL,QAAQuB,OAAQD,IAAK,KACtCE,EAAUnB,KAAKK,eAAeL,KAAKL,QAAQQ,IAAIc,IAC/CG,EAAUpB,KAAKK,eAAeL,KAAKL,QAAQa,QAAQW,MACzCE,IAAIF,EAASC,UAExBL,kCAeHM,QACkD,iBAAxCV,OAAOC,UAAUC,SAASC,KAAKO,UAEnC,IAAItB,UAAU,8DAECsB,EAAIC,yDAAW,oBAA9BnB,OAAKC,YACNK,IAAIN,EAAKC,oHAaZD,WACGH,KAAKL,QAAQa,QAAQR,KAAKK,eAAeF,wCAa1CC,WACUJ,KAAKK,eAAeD,wCAWjCT,QAAQ4B,+CAeFC,OACNC,MAAMC,QAAQF,SACT,IAAIzB,UAAU,0BAEnB,IAAIkB,EAAI,EAAGA,EAAIO,EAAIN,SAAUD,OACzBtB,QAAQgC,WAAW3B,KAAKK,eAAemB,EAAIP,2CAY7CjB,KAAKL,QAAQuB,8CASTd,mBACIA,gBAAAA,QACN,aACA,gBACMwB,KAAKC,UAAUzB,kBAGfA,wCAWNT,gBAGGY,QAFI,SAAA,YAGJoB,WAHI,WAIL,EACT,MAAOG,UACE"}