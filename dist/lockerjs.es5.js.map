{"version":3,"file":"lockerjs.es5.js","sources":["../src/locker.js"],"sourcesContent":["'use strict';\n\n/**\n * Extremely light library that makes HTML5 storage usage easier to the edge.\n * No dependencies, no configuration.\n */\nexport default class {\n\t/**\n\t * Creates a locker\n\t * @param {object} storage\n\t * @example\n\t * // localStorage\n\t * const locker = new Locker(window.localStorage);\n\t * // sessionStorage\n\t * const locker = new Locker(window.sessionStorage);\n\t */\n\tconstructor(storage) {\n\t\tconst typeErrMsg = 'Invalid Storage object';\n\t\tconst refErrMsg = 'HTML5 Storage is not supported in this environment';\n\t\tif (storage !== window.localStorage &&\n\t\t\tstorage !== window.sessionStorage) {\n\t\t\tthrow new TypeError(typeErrMsg);\n\t\t}\n\t\tif (this._isSupported(storage)) {\n\t\t\tthis.storage = storage;\n\t\t} else {\n\t\t\tthrow new ReferenceError(refErrMsg);\n\t\t}\n\t}\n\n\t/**\n\t * Add a value into HTML5 window.localStorage.\n\t * @param {*} key\n\t * @param {*} value\n\t * @example\n\t * const myObj = {\n\t *     'name': 'John',\n\t *     'surname': 'Test',\n\t * };\n\t */\n\tadd(key, value) {\n\t\tkey = this._parseToString(key);\n\t\tswitch (typeof value) {\n\t\t\tcase 'object': {\n\t\t\t\tconst parsedVal = this._parseToString(value);\n\t\t\t\tthis.storage.setItem(key, parsedVal);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.storage.setItem(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Add a value with a given key to the storage if a key is not already used.\n\t * Otherwise returns ReferenceError instead of overwriting it;\n\t * @param {*} key\n\t * @param {*} value\n\t * @example\n\t * locker.addSafely('Key 1', 1); //OK\n\t * locker.addSafely('Key 1', 123); //ReferenceError\n\t */\n\taddSafely(key, value) {\n\t\tkey = this._parseToString(key);\n\t\tconst keyExists = this.storage.getItem(key);\n\t\tif (keyExists) {\n\t\t\tthrow new ReferenceError('Provided key is already in use');\n\t\t}\n\t\tthis.add(key, value);\n\t}\n\n\t/**\n\t * Get a value from HTML5 window.localStorage\n\t * @param {*} key\n\t * @return {*}\n\t * @example\n\t * locker.get(123);\n\t */\n\tget(key) {\n\t\tkey = this._parseToString(key);\n\t\treturn this.storage.getItem(key);\n\t}\n\n\t/**\n\t * Saves map as-is into localstorage\n\t * @param {Map} map\n\t * @example\n\t * const sampleMap = new Map();\n\t * map.set(1, 'First entry');\n\t * map.set(2, 'Second entry');\n\t * locker.clear();\n\t * locker.saveMap(sampleMap);\n\t * locker.get(1); // 'First entry'\n\t * locker.get(2); // 'Second entry'\n\t */\n\tsaveMap(map) {\n\t\tconst isMap = Object.prototype.toString.call(map) === '[object Map]';\n\t\tif (!isMap) {\n\t\t\tthrow new TypeError('Must be of type Map');\n\t\t}\n\t\tfor (let [key, value] of map) {\n\t\t\tthis.add(key, value);\n\t\t}\n\t}\n\n\t/**\n\t * Saves and returns whole storage as map\n\t * @return {Map} HTML5 Storage copy\n\t * @example\n\t * locker.add(1, [1, 2, 3]);\n\t * const backup = locker.saveMap();\n\t */\n\tgetMap() {\n\t\tconst mappedStorage = new Map();\n\t\tfor (let i = 0; i < this.storage.length; i++) {\n\t\t\tlet tempKey = this._parseToString(this.storage.key(i));\n\t\t\tlet tempVal = this._parseToString(this.storage.getItem(tempKey));\n\t\t\tmappedStorage.set(tempKey, tempVal);\n\t\t}\n\t\treturn mappedStorage;\n\t}\n\n\t/**\n\t * Saves set as-is into localstorage\n\t * @param {Set} set\n\t * @example\n\t * const sampleSet = new Set();\n\t * set.add(1, 'First entry');\n\t * set.add(2, 'Second entry');\n\t * locker.clear();\n\t * locker.saveSet(sampleSet);\n\t * locker.get(1); // 'First entry'\n\t * locker.get(2); // 'Second entry'\n\t */\n\tsaveSet(set) {\n\t\tconst isSet = Object.prototype.toString.call(set) === '[object Set]';\n\t\tif (!isSet) {\n\t\t\tthrow new TypeError('Must be of type Set');\n\t\t}\n\t\tfor (let [key, value] of set.entries()) {\n\t\t\tthis.add(key, value);\n\t\t}\n\t}\n\n\t/**\n\t * Check whether the given key exists in the window.localStorage\n\t * @param {*} key\n\t * @return {boolean}\n\t * @example\n\t * locker.add(2, 1234);\n\t * locker.keyExists(2) // True\n\t * locker.keyExists({'name': 'John'}) // False\n\t */\n\tkeyExists(key) {\n\t\treturn !!this.storage.getItem(this._parseToString(key));\n\t}\n\n\t/**\n\t * Check whether the given value exists in the window.localStorage\n\t * @param {*} value\n\t * @return {boolean}\n\t * @example\n\t * const mySet = new Set();\n\t * mySet.set(\"Some array\", [1, 2, 3]);\n\t * locker.add(mySet);\n\t * locker.valueExists(mySet); // True\n\t */\n\tvalueExists(value) {\n\t\tconst parsedVal = this._parseToString(value);\n\t\treturn !!parsedVal;\n\t}\n\n\t/**\n\t * Clear the whole window.localStorage\n\t * @example\n\t * locker.add(1, [1, 2]);\n\t * locker.clear(); //Empty\n\t */\n\tclear() {\n\t\tthis.storage.clear();\n\t}\n\n\t/**\n\t * Removes HTML5 Storage values by keys provide in array\n\t * @param {array} arr\n\t * @example\n\t * const testObj = {\n\t *     'name': 'John',\n\t * }\n\t * locker.add(testObj, \"We like this customer!\");\n\t * locker.add(1, 123);\n\t * const keysToRemove = ['1', testObj];\n\t * locker.clearSpecified(keysToRemove); // Empty\n\t */\n\tclearSpecified(arr) {\n\t\tif (!Array.isArray(arr)) {\n\t\t\tthrow new TypeError('Array not provided');\n\t\t}\n\t\tfor (let i = 0; i < arr.length; ++i) {\n\t\t\tthis.storage.removeItem(this._parseToString(arr[i]));\n\t\t}\n\t}\n\n\t/**\n\t * Returns the size of the storage\n\t * @return {number}\n\t * @example\n\t * locker.add(12, [1,2]);\n\t * locker.size(); //1\n\t */\n\tsize() {\n\t\treturn this.storage.length;\n\t}\n\n\t/**\n\t * Parse value to stringified JSON\n\t * @param {*} value\n\t * @return {string}\n\t * @private\n\t */\n\t_parseToString(value) {\n\t\tswitch (typeof value) {\n\t\t\tcase 'number':\n\t\t\tcase 'object': {\n\t\t\t\treturn JSON.stringify(value);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Check whether current environment supports HTML5 storage\n\t * @param {Object} storage\n\t * @return {boolean}\n\t * @private\n\t */\n\t_isSupported(storage) {\n\t\tconst mockVal = '__test';\n\t\ttry {\n\t\t\tstorage.setItem(mockVal, mockVal);\n\t\t\tstorage.removeItem(mockVal);\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n"],"names":["storage","window","localStorage","sessionStorage","TypeError","this","_isSupported","ReferenceError","key","value","_parseToString","parsedVal","setItem","getItem","add","map","Object","prototype","toString","call","mappedStorage","Map","i","length","tempKey","tempVal","set","entries","clear","arr","Array","isArray","removeItem","JSON","stringify","e"],"mappings":";yqCAgBaA,gBAGPA,IAAYC,OAAOC,cACtBF,IAAYC,OAAOE,qBACb,IAAIC,UAJQ,8BAMfC,KAAKC,aAAaN,SAGf,IAAIO,eARO,2DAMZP,QAAUA,wCAgBbQ,EAAKC,YACFJ,KAAKK,eAAeF,YACXC,gBAAAA,QACT,aACEE,EAAYN,KAAKK,eAAeD,QACjCT,QAAQY,QAAQJ,EAAKG,sBAIrBX,QAAQY,QAAQJ,EAAKC,sCAcnBD,EAAKC,QACRJ,KAAKK,eAAeF,GACRH,KAAKL,QAAQa,QAAQL,SAEhC,IAAID,eAAe,uCAErBO,IAAIN,EAAKC,+BAUXD,YACGH,KAAKK,eAAeF,GACnBH,KAAKL,QAAQa,QAAQL,mCAerBO,QAC+C,iBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,UAEtC,IAAIX,UAAU,8DAEIW,iDAAK,oBAApBP,OAAKC,YACTK,IAAIN,EAAKC,uHAaV,IADCW,EAAgB,IAAIC,IACjBC,EAAI,EAAGA,EAAIjB,KAAKL,QAAQuB,OAAQD,IAAK,KACzCE,EAAUnB,KAAKK,eAAeL,KAAKL,QAAQQ,IAAIc,IAC/CG,EAAUpB,KAAKK,eAAeL,KAAKL,QAAQa,QAAQW,MACzCE,IAAIF,EAASC,UAErBL,kCAeAM,QAC+C,iBAAxCV,OAAOC,UAAUC,SAASC,KAAKO,UAEtC,IAAItB,UAAU,8DAEIsB,EAAIC,yDAAW,oBAA9BnB,OAAKC,YACTK,IAAIN,EAAKC,oHAaND,WACAH,KAAKL,QAAQa,QAAQR,KAAKK,eAAeF,wCAavCC,WACOJ,KAAKK,eAAeD,wCAWjCT,QAAQ4B,+CAeCC,OACTC,MAAMC,QAAQF,SACZ,IAAIzB,UAAU,0BAEhB,IAAIkB,EAAI,EAAGA,EAAIO,EAAIN,SAAUD,OAC5BtB,QAAQgC,WAAW3B,KAAKK,eAAemB,EAAIP,2CAY1CjB,KAAKL,QAAQuB,8CASNd,mBACCA,gBAAAA,QACT,aACA,gBACGwB,KAAKC,UAAUzB,kBAGfA,wCAWGT,gBAGHY,QAFO,SAAA,YAGPoB,WAHO,WAIR,EACN,MAAOG,UACD"}