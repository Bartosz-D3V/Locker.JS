{"version":3,"file":"Locker.js.es5.js","sources":["../src/locker.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * Extremely light library that makes HTML5 storage usage easier to the edge.\r\n * No dependencies, no configuration.\r\n */\r\nexport default class {\r\n\t/**\r\n\t * Creates a locker\r\n\t * @param {object} storage\r\n\t */\r\n\tconstructor(storage) {\r\n\t\tif (storage !== window.localStorage &&\r\n\t\t\tstorage !== window.sessionStorage) {\r\n\t\t\tthrow new TypeError('Invalid Storage object');\r\n\t\t} else {\r\n\t\t\tthis.storage = storage;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add a value into HTML5 window.localStorage.\r\n\t * @param {*} key\r\n\t * @param {*} value\r\n\t */\r\n\tadd(key, value) {\r\n\t\tkey = this._parseToString(key);\r\n\t\tswitch (typeof value) {\r\n\t\t\tcase 'object': {\r\n\t\t\t\tconst parsedVal = this._parseToString(value);\r\n\t\t\t\tthis.storage.setItem(key, parsedVal);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault: {\r\n\t\t\t\tthis.storage.setItem(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add a value with a given key to the storage if a key is not already used.\r\n\t * Otherwise returns ReferenceError instead of overwriting it;\r\n\t * @param {*} key\r\n\t * @param {*} value\r\n\t */\r\n\taddSafely(key, value) {\r\n\t\tkey = this._parseToString(key);\r\n\t\tconst keyExists = this.storage.getItem(key);\r\n\t\tif (keyExists) {\r\n\t\t\tthrow new ReferenceError('Provided key is already in use');\r\n\t\t}\r\n\t\tthis.add(key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Get a value from HTML5 window.localStorage\r\n\t * @param {*} key\r\n\t * @return {*}\r\n\t */\r\n\tget(key) {\r\n\t\tkey = this._parseToString(key);\r\n\t\treturn this.storage.getItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Saves map as-is into localstorage\r\n\t * @param {Map} map\r\n\t */\r\n\tsaveMap(map) {\r\n\t\tconst isMap = Object.prototype.toString.call(map) === '[object Map]';\r\n\t\tif (!isMap) {\r\n\t\t\tthrow new TypeError('Must be of type Map');\r\n\t\t}\r\n\t\tfor (let [key, value] of map) {\r\n\t\t\tthis.add(key, value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Saves and returns whole storage as map\r\n\t * @return {Map} localstorageCopy\r\n\t */\r\n\tgetMap() {\r\n\t\tconst mappedStorage = new Map();\r\n\t\tfor (let i = 0; i < this.storage.length; i++) {\r\n\t\t\tlet tempKey = this._parseToString(this.storage.key(i));\r\n\t\t\tlet tempVal = this._parseToString(this.storage.getItem(tempKey));\r\n\t\t\tmappedStorage.set(tempKey, tempVal);\r\n\t\t}\r\n\t\treturn mappedStorage;\r\n\t}\r\n\r\n\t/**\r\n\t * Check whether the given key exists in the window.localStorage\r\n\t * @param {*} key\r\n\t * @return {boolean}\r\n\t */\r\n\tkeyExists(key) {\r\n\t\treturn !!this.storage.getItem(this._parseToString(key));\r\n\t}\r\n\r\n\t/**\r\n\t * Check whether the given value exists in the window.localStorage\r\n\t * @param {*} value\r\n\t * @return {boolean}\r\n\t */\r\n\tvalueExists(value) {\r\n\t\tconst parsedVal = this._parseToString(value);\r\n\t\treturn !!parsedVal;\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the whole window.localStorage\r\n\t */\r\n\tclear() {\r\n\t\tthis.storage.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Removes window.localstorage values by keys provide in array\r\n\t * @param {array} arr\r\n\t */\r\n\tclearSpecified(arr) {\r\n\t\tif (!Array.isArray(arr)) {\r\n\t\t\tthrow new TypeError('Array not provided');\r\n\t\t}\r\n\t\tfor (let i = 0; i < arr.length; ++i) {\r\n\t\t\tthis.storage.removeItem(this._parseToString(arr[i]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return size of localstorage\r\n\t * @return {number}\r\n\t */\r\n\tsize() {\r\n\t\treturn this.storage.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Parse value to stringified JSON\r\n\t * @param {*} value\r\n\t * @return {string}\r\n\t * @private\r\n\t */\r\n\t_parseToString(value) {\r\n\t\tswitch (typeof value) {\r\n\t\t\tcase 'number':\r\n\t\t\tcase 'object': {\r\n\t\t\t\treturn JSON.stringify(value);\r\n\t\t\t}\r\n\t\t\tdefault: {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["storage","window","localStorage","sessionStorage","TypeError","key","value","this","_parseToString","parsedVal","setItem","getItem","ReferenceError","add","map","Object","prototype","toString","call","mappedStorage","Map","i","length","tempKey","tempVal","set","clear","arr","Array","isArray","removeItem","JSON","stringify"],"mappings":";yqCAWaA,gBACPA,IAAYC,OAAOC,cACtBF,IAAYC,OAAOE,qBACb,IAAIC,UAAU,+BAEfJ,QAAUA,wCASbK,EAAKC,YACFC,KAAKC,eAAeH,YACXC,gBAAAA,QACT,aACEG,EAAYF,KAAKC,eAAeF,QACjCN,QAAQU,QAAQL,EAAKI,sBAIrBT,QAAQU,QAAQL,EAAKC,sCAWnBD,EAAKC,QACRC,KAAKC,eAAeH,GACRE,KAAKP,QAAQW,QAAQN,SAEhC,IAAIO,eAAe,uCAErBC,IAAIR,EAAKC,+BAQXD,YACGE,KAAKC,eAAeH,GACnBE,KAAKP,QAAQW,QAAQN,mCAOrBS,QAC+C,iBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,UAEtC,IAAIV,UAAU,8DAEIU,iDAAK,oBAApBT,OAAKC,YACTO,IAAIR,EAAKC,uHAUV,IADCa,EAAgB,IAAIC,IACjBC,EAAI,EAAGA,EAAId,KAAKP,QAAQsB,OAAQD,IAAK,KACzCE,EAAUhB,KAAKC,eAAeD,KAAKP,QAAQK,IAAIgB,IAC/CG,EAAUjB,KAAKC,eAAeD,KAAKP,QAAQW,QAAQY,MACzCE,IAAIF,EAASC,UAErBL,oCAQEd,WACAE,KAAKP,QAAQW,QAAQJ,KAAKC,eAAeH,wCAQvCC,WACOC,KAAKC,eAAeF,wCAQjCN,QAAQ0B,+CAOCC,OACTC,MAAMC,QAAQF,SACZ,IAAIvB,UAAU,0BAEhB,IAAIiB,EAAI,EAAGA,EAAIM,EAAIL,SAAUD,OAC5BrB,QAAQ8B,WAAWvB,KAAKC,eAAemB,EAAIN,2CAS1Cd,KAAKP,QAAQsB,8CASNhB,mBACCA,gBAAAA,QACT,aACA,gBACGyB,KAAKC,UAAU1B,kBAGfA"}